<?php
chdir(__DIR__ . '/../../');

if (!file_exists('vendor/autoload.php')) {
    echo '[ERROR] It\'s required to run "composer install" before building PhpMetrics!' . PHP_EOL;
    exit(1);
}

$filename = 'build/phpmetrics.phar';
if (file_exists($filename)) {
    unlink($filename);
}
if (!is_dir(dirname($filename))) {
    mkdir(dirname($filename), 0o777, true);
}

$phar = new Phar($filename, 0, 'phpmetrics.phar');
$phar->setSignatureAlgorithm(Phar::SHA1);
$phar->startBuffering();

$extToLoad = ['*.php', '*.js', '*.html', '*.css', '*.png', '*.ttf', '*.ico'];
$files = array_merge(...array_map(rglob(...), $extToLoad));
$files[] = '.semver';
// Remove files that are in unwanted locations.
$excludes = ['.git/', '.svn/', 'bin/', 'tests/', 'doc/', 'qa/', 'artifacts/'];
foreach ($excludes as $exclude) {
    $files = array_filter($files, static fn (string $file): bool => !str_starts_with($file, $exclude));
}

foreach ($files as $file) {
    $phar->addFromString(str_replace(__DIR__ . '/', '', $file), file_get_contents($file));
}

$phar->setStub(<<<'STUB'
#!/usr/bin/env php
<?php

/**
 * This file is part of the PhpMetrics
 *
 * © Jean-François Lépine
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

use Hal\DependencyInjection\DependencyInjectionProcessor;

Phar::mapPhar('phpmetrics.phar');

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// PLEASE do not edit this file without editing bin/phpmetrics
// PLEASE do not edit this file without editing bin/phpmetrics
// PLEASE do not edit this file without editing bin/phpmetrics
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

require_once 'phar://phpmetrics.phar/vendor/autoload.php';
(new DependencyInjectionProcessor())->load($argv)->run();

__HALT_COMPILER();
STUB
);
$phar->stopBuffering();

chmod($filename, 0o755);

function rglob($pattern = '*', $flags = 0, $path = '')
{
    $paths = glob($path . '*', GLOB_MARK | GLOB_ONLYDIR | GLOB_NOSORT);
    $files = glob($path . $pattern, $flags);
    foreach ($paths as $path) {
        $files = array_merge($files, rglob($pattern, $flags, $path));
    }
    return $files;
}
